<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="collection_of_sql_statements">
    <select id="Searchlist_all" resultType="com.solponge.domain.product.productVo">
        SELECT * FROM product WHERE product_title LIKE '%' || #{SearchValue} || '%' OR product_writer LIKE '%' || #{SearchValue} || '%' AND (product_garbage = 1)
    </select>
    <select id="Searchlist_product_title" resultType="com.solponge.domain.product.productVo">
        SELECT * FROM product WHERE product_title LIKE '%' || #{SearchValue} || '%'  AND (product_garbage = 1)
    </select>
    <select id="Searchlist_product_writer" resultType="com.solponge.domain.product.productVo">
        SELECT * FROM product WHERE product_writer LIKE '%' || #{SearchValue} || '%'  AND (product_garbage = 1)
    </select>
    <select id="list" resultType="com.solponge.domain.product.productVo">
        SELECT * FROM product WHERE product_garbage = 1 ORDER BY product_num ASC
    </select>
    <select id="list_new_8" resultType="com.solponge.domain.product.productVo">
        <![CDATA[
        SELECT DISTINCT product_num, product_title, product_subtitle, product_writer, product_price, product_img, product_date
        FROM product
        WHERE product_garbage = 1
        ORDER BY product_date DESC LIMIT 8;
        ]]>
    </select>
    <select id="list_popular_6" resultType="com.solponge.domain.product.productVo">
        <![CDATA[
        SELECT DISTINCT product_num, product_title, product_writer, product_img, product_sale
        FROM product
        WHERE product_garbage = 1
        ORDER BY PRODUCT_SALE DESC LIMIT 6;
        ]]>
    </select>
    <select id="product" resultType="com.solponge.domain.product.productVo">
        select * from product where product_garbage = 1 AND product_num=#{product_num}
    </select>
    <insert id="insertpro" useGeneratedKeys="true" keyProperty="PRODUCT_NUM_num" keyColumn="PRODUCT_NUM">
        insert into product(product_num, product_title, product_subtitle, product_writer, product_price, product_img, product_date, product_page, product_stock, product_code)
        values((select nextval('product') from dual), #{TITLE}, #{SUB}, #{WRITER}, #{PRICE}, #{IMG}, #{DATE}, #{PAGE}, #{STOCK}, #{CODE})
    </insert>
    <!--    <delete id="deletepro">-->
    <!--        DELETE PRODUCT WHERE PRODUCT_NUM=#{NUM}-->
    <!--    </delete>-->
    <update id="deletepro">
        update product set product_garbage=0 where product_num=#{NUM}
    </update>

    <update id="updatepro">
        update product set product_title=#{TITLE}, product_subtitle=#{SUB}, product_writer=#{WRITER}, product_price=#{PRICE}, product_img=#{IMG},product_date=#{DATE}, product_page=#{PAGE}, product_stock=#{STOCK}, product_sale=#{SALE}, product_visit=#{VISIT} where product_num=#{NUM}
    </update>
    <update id="updateProductCode">
        UPDATE product
        SET product_code = #{CODE, jdbcType=CLOB}
        WHERE product_num = #{NUM, jdbcType=INTEGER}
    </update>

    <update id="updateProductSale">
        UPDATE product p1
            JOIN (SELECT product_sale + #{payment_stock} AS new_sale FROM product WHERE product_num = #{product_num}) p2
        SET p1.product_sale = p2.new_sale
        WHERE p1.product_num = #{product_num}
    </update>
</mapper>